/* automatically generated by rust-bindgen 0.55.1 */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_imgui_str_t {
    pub buf: [::std::os::raw::c_char; 96usize],
}
#[test]
fn bindgen_test_layout_sg_imgui_str_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_str_t>(),
        96usize,
        concat!("Size of: ", stringify!(sg_imgui_str_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_str_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sg_imgui_str_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_str_t>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_str_t),
            "::",
            stringify!(buf)
        )
    );
}
impl Default for sg_imgui_str_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_buffer_t {
    pub res_id: sg_buffer,
    pub label: sg_imgui_str_t,
    pub desc: sg_buffer_desc,
}
#[test]
fn bindgen_test_layout_sg_imgui_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_buffer_t>(),
        184usize,
        concat!("Size of: ", stringify!(sg_imgui_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_buffer_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_buffer_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffer_t>())).res_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffer_t),
            "::",
            stringify!(res_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffer_t>())).label as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffer_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffer_t>())).desc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffer_t),
            "::",
            stringify!(desc)
        )
    );
}
impl Default for sg_imgui_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_image_t {
    pub res_id: sg_image,
    pub ui_scale: f32,
    pub label: sg_imgui_str_t,
    pub desc: sg_image_desc,
}
#[test]
fn bindgen_test_layout_sg_imgui_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_image_t>(),
        1792usize,
        concat!("Size of: ", stringify!(sg_imgui_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_image_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_image_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_image_t>())).res_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_image_t),
            "::",
            stringify!(res_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_image_t>())).ui_scale as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_image_t),
            "::",
            stringify!(ui_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_image_t>())).label as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_image_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_image_t>())).desc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_image_t),
            "::",
            stringify!(desc)
        )
    );
}
impl Default for sg_imgui_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_shader_t {
    pub res_id: sg_shader,
    pub label: sg_imgui_str_t,
    pub vs_entry: sg_imgui_str_t,
    pub vs_d3d11_target: sg_imgui_str_t,
    pub vs_image_name: [sg_imgui_str_t; 12usize],
    pub vs_uniform_name: [[sg_imgui_str_t; 16usize]; 4usize],
    pub fs_entry: sg_imgui_str_t,
    pub fs_d3d11_target: sg_imgui_str_t,
    pub fs_image_name: [sg_imgui_str_t; 12usize],
    pub fs_uniform_name: [[sg_imgui_str_t; 16usize]; 4usize],
    pub attr_name: [sg_imgui_str_t; 16usize],
    pub attr_sem_name: [sg_imgui_str_t; 16usize],
    pub desc: sg_shader_desc,
}
#[test]
fn bindgen_test_layout_sg_imgui_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_shader_t>(),
        21136usize,
        concat!("Size of: ", stringify!(sg_imgui_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_shader_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_shader_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).res_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(res_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).label as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).vs_entry as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(vs_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_shader_t>())).vs_d3d11_target as *const _ as usize
        },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(vs_d3d11_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).vs_image_name as *const _ as usize },
        292usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(vs_image_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_shader_t>())).vs_uniform_name as *const _ as usize
        },
        1444usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(vs_uniform_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).fs_entry as *const _ as usize },
        7588usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(fs_entry)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_shader_t>())).fs_d3d11_target as *const _ as usize
        },
        7684usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(fs_d3d11_target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).fs_image_name as *const _ as usize },
        7780usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(fs_image_name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_shader_t>())).fs_uniform_name as *const _ as usize
        },
        8932usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(fs_uniform_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).attr_name as *const _ as usize },
        15076usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(attr_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).attr_sem_name as *const _ as usize },
        16612usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(attr_sem_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shader_t>())).desc as *const _ as usize },
        18152usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shader_t),
            "::",
            stringify!(desc)
        )
    );
}
impl Default for sg_imgui_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_pipeline_t {
    pub res_id: sg_pipeline,
    pub label: sg_imgui_str_t,
    pub desc: sg_pipeline_desc,
}
#[test]
fn bindgen_test_layout_sg_imgui_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_pipeline_t>(),
        560usize,
        concat!("Size of: ", stringify!(sg_imgui_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_pipeline_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_pipeline_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipeline_t>())).res_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipeline_t),
            "::",
            stringify!(res_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipeline_t>())).label as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipeline_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipeline_t>())).desc as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipeline_t),
            "::",
            stringify!(desc)
        )
    );
}
impl Default for sg_imgui_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_pass_t {
    pub res_id: sg_pass,
    pub label: sg_imgui_str_t,
    pub color_image_scale: [f32; 4usize],
    pub ds_image_scale: f32,
    pub desc: sg_pass_desc,
}
#[test]
fn bindgen_test_layout_sg_imgui_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_pass_t>(),
        200usize,
        concat!("Size of: ", stringify!(sg_imgui_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_pass_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_pass_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pass_t>())).res_id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pass_t),
            "::",
            stringify!(res_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pass_t>())).label as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pass_t),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_pass_t>())).color_image_scale as *const _ as usize
        },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pass_t),
            "::",
            stringify!(color_image_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pass_t>())).ds_image_scale as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pass_t),
            "::",
            stringify!(ds_image_scale)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pass_t>())).desc as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pass_t),
            "::",
            stringify!(desc)
        )
    );
}
impl Default for sg_imgui_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_buffers_t {
    pub open: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub sel_buf: sg_buffer,
    pub slots: *mut sg_imgui_buffer_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_buffers_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_buffers_t>(),
        24usize,
        concat!("Size of: ", stringify!(sg_imgui_buffers_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_buffers_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_buffers_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffers_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffers_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffers_t>())).num_slots as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffers_t),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffers_t>())).sel_buf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffers_t),
            "::",
            stringify!(sel_buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_buffers_t>())).slots as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_buffers_t),
            "::",
            stringify!(slots)
        )
    );
}
impl Default for sg_imgui_buffers_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_images_t {
    pub open: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub sel_img: sg_image,
    pub slots: *mut sg_imgui_image_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_images_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_images_t>(),
        24usize,
        concat!("Size of: ", stringify!(sg_imgui_images_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_images_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_images_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_images_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_images_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_images_t>())).num_slots as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_images_t),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_images_t>())).sel_img as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_images_t),
            "::",
            stringify!(sel_img)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_images_t>())).slots as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_images_t),
            "::",
            stringify!(slots)
        )
    );
}
impl Default for sg_imgui_images_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_shaders_t {
    pub open: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub sel_shd: sg_shader,
    pub slots: *mut sg_imgui_shader_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_shaders_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_shaders_t>(),
        24usize,
        concat!("Size of: ", stringify!(sg_imgui_shaders_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_shaders_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_shaders_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shaders_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shaders_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shaders_t>())).num_slots as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shaders_t),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shaders_t>())).sel_shd as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shaders_t),
            "::",
            stringify!(sel_shd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_shaders_t>())).slots as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_shaders_t),
            "::",
            stringify!(slots)
        )
    );
}
impl Default for sg_imgui_shaders_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_pipelines_t {
    pub open: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub sel_pip: sg_pipeline,
    pub slots: *mut sg_imgui_pipeline_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_pipelines_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_pipelines_t>(),
        24usize,
        concat!("Size of: ", stringify!(sg_imgui_pipelines_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_pipelines_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_pipelines_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipelines_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipelines_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipelines_t>())).num_slots as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipelines_t),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipelines_t>())).sel_pip as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipelines_t),
            "::",
            stringify!(sel_pip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_pipelines_t>())).slots as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_pipelines_t),
            "::",
            stringify!(slots)
        )
    );
}
impl Default for sg_imgui_pipelines_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_passes_t {
    pub open: bool,
    pub num_slots: ::std::os::raw::c_int,
    pub sel_pass: sg_pass,
    pub slots: *mut sg_imgui_pass_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_passes_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_passes_t>(),
        24usize,
        concat!("Size of: ", stringify!(sg_imgui_passes_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_passes_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_passes_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_passes_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_passes_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_passes_t>())).num_slots as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_passes_t),
            "::",
            stringify!(num_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_passes_t>())).sel_pass as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_passes_t),
            "::",
            stringify!(sel_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_passes_t>())).slots as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_passes_t),
            "::",
            stringify!(slots)
        )
    );
}
impl Default for sg_imgui_passes_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_INVALID: sg_imgui_cmd_t = 0;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_RESET_STATE_CACHE: sg_imgui_cmd_t = 1;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_MAKE_BUFFER: sg_imgui_cmd_t = 2;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_MAKE_IMAGE: sg_imgui_cmd_t = 3;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_MAKE_SHADER: sg_imgui_cmd_t = 4;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_MAKE_PIPELINE: sg_imgui_cmd_t = 5;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_MAKE_PASS: sg_imgui_cmd_t = 6;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DESTROY_BUFFER: sg_imgui_cmd_t = 7;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DESTROY_IMAGE: sg_imgui_cmd_t = 8;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DESTROY_SHADER: sg_imgui_cmd_t = 9;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DESTROY_PIPELINE: sg_imgui_cmd_t = 10;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DESTROY_PASS: sg_imgui_cmd_t = 11;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UPDATE_BUFFER: sg_imgui_cmd_t = 12;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UPDATE_IMAGE: sg_imgui_cmd_t = 13;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_APPEND_BUFFER: sg_imgui_cmd_t = 14;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_BEGIN_DEFAULT_PASS: sg_imgui_cmd_t = 15;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_BEGIN_PASS: sg_imgui_cmd_t = 16;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_APPLY_VIEWPORT: sg_imgui_cmd_t = 17;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_APPLY_SCISSOR_RECT: sg_imgui_cmd_t = 18;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_APPLY_PIPELINE: sg_imgui_cmd_t = 19;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_APPLY_BINDINGS: sg_imgui_cmd_t = 20;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_APPLY_UNIFORMS: sg_imgui_cmd_t = 21;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DRAW: sg_imgui_cmd_t = 22;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_END_PASS: sg_imgui_cmd_t = 23;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_COMMIT: sg_imgui_cmd_t = 24;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ALLOC_BUFFER: sg_imgui_cmd_t = 25;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ALLOC_IMAGE: sg_imgui_cmd_t = 26;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ALLOC_SHADER: sg_imgui_cmd_t = 27;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ALLOC_PIPELINE: sg_imgui_cmd_t = 28;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ALLOC_PASS: sg_imgui_cmd_t = 29;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DEALLOC_BUFFER: sg_imgui_cmd_t = 30;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DEALLOC_IMAGE: sg_imgui_cmd_t = 31;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DEALLOC_SHADER: sg_imgui_cmd_t = 32;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DEALLOC_PIPELINE: sg_imgui_cmd_t = 33;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_DEALLOC_PASS: sg_imgui_cmd_t = 34;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_INIT_BUFFER: sg_imgui_cmd_t = 35;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_INIT_IMAGE: sg_imgui_cmd_t = 36;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_INIT_SHADER: sg_imgui_cmd_t = 37;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_INIT_PIPELINE: sg_imgui_cmd_t = 38;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_INIT_PASS: sg_imgui_cmd_t = 39;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UNINIT_BUFFER: sg_imgui_cmd_t = 40;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UNINIT_IMAGE: sg_imgui_cmd_t = 41;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UNINIT_SHADER: sg_imgui_cmd_t = 42;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UNINIT_PIPELINE: sg_imgui_cmd_t = 43;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_UNINIT_PASS: sg_imgui_cmd_t = 44;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_FAIL_BUFFER: sg_imgui_cmd_t = 45;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_FAIL_IMAGE: sg_imgui_cmd_t = 46;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_FAIL_SHADER: sg_imgui_cmd_t = 47;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_FAIL_PIPELINE: sg_imgui_cmd_t = 48;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_FAIL_PASS: sg_imgui_cmd_t = 49;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_PUSH_DEBUG_GROUP: sg_imgui_cmd_t = 50;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_POP_DEBUG_GROUP: sg_imgui_cmd_t = 51;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_BUFFER_POOL_EXHAUSTED: sg_imgui_cmd_t = 52;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_IMAGE_POOL_EXHAUSTED: sg_imgui_cmd_t = 53;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_SHADER_POOL_EXHAUSTED: sg_imgui_cmd_t = 54;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_PIPELINE_POOL_EXHAUSTED: sg_imgui_cmd_t = 55;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_PASS_POOL_EXHAUSTED: sg_imgui_cmd_t = 56;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_CONTEXT_MISMATCH: sg_imgui_cmd_t = 57;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_PASS_INVALID: sg_imgui_cmd_t = 58;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_DRAW_INVALID: sg_imgui_cmd_t = 59;
pub const sg_imgui_cmd_t_SG_IMGUI_CMD_ERR_BINDINGS_INVALID: sg_imgui_cmd_t = 60;
pub type sg_imgui_cmd_t = ::std::os::raw::c_uint;
#[repr(C)]
pub struct sg_imgui_args_make_buffer_t {
    pub result: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_make_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_make_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_make_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_make_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_make_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_make_buffer_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_make_buffer_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_make_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_make_image_t {
    pub result: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_make_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_make_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_make_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_make_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_make_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_make_image_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_make_image_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_make_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_make_shader_t {
    pub result: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_make_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_make_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_make_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_make_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_make_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_make_shader_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_make_shader_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_make_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_make_pipeline_t {
    pub result: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_make_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_make_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_make_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_make_pipeline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_make_pipeline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_make_pipeline_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_make_pipeline_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_make_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_make_pass_t {
    pub result: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_make_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_make_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_make_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_make_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_make_pass_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_make_pass_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_make_pass_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_make_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_destroy_buffer_t {
    pub buffer: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_destroy_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_destroy_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_destroy_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_destroy_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_destroy_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_destroy_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_destroy_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for sg_imgui_args_destroy_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_destroy_image_t {
    pub image: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_destroy_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_destroy_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_destroy_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_destroy_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_destroy_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_destroy_image_t>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_destroy_image_t),
            "::",
            stringify!(image)
        )
    );
}
impl Default for sg_imgui_args_destroy_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_destroy_shader_t {
    pub shader: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_destroy_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_destroy_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_destroy_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_destroy_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_destroy_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_destroy_shader_t>())).shader as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_destroy_shader_t),
            "::",
            stringify!(shader)
        )
    );
}
impl Default for sg_imgui_args_destroy_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_destroy_pipeline_t {
    pub pipeline: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_destroy_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_destroy_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_destroy_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_destroy_pipeline_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sg_imgui_args_destroy_pipeline_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_destroy_pipeline_t>())).pipeline as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_destroy_pipeline_t),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for sg_imgui_args_destroy_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_destroy_pass_t {
    pub pass: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_destroy_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_destroy_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_destroy_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_destroy_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_destroy_pass_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_destroy_pass_t>())).pass as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_destroy_pass_t),
            "::",
            stringify!(pass)
        )
    );
}
impl Default for sg_imgui_args_destroy_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_update_buffer_t {
    pub buffer: sg_buffer,
    pub data_size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_update_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_update_buffer_t>(),
        8usize,
        concat!("Size of: ", stringify!(sg_imgui_args_update_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_update_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_update_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_update_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_update_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_update_buffer_t>())).data_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_update_buffer_t),
            "::",
            stringify!(data_size)
        )
    );
}
impl Default for sg_imgui_args_update_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_update_image_t {
    pub image: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_update_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_update_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_update_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_update_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_update_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_update_image_t>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_update_image_t),
            "::",
            stringify!(image)
        )
    );
}
impl Default for sg_imgui_args_update_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_append_buffer_t {
    pub buffer: sg_buffer,
    pub data_size: ::std::os::raw::c_int,
    pub result: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_append_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_append_buffer_t>(),
        12usize,
        concat!("Size of: ", stringify!(sg_imgui_args_append_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_append_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_append_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_append_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_append_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_append_buffer_t>())).data_size as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_append_buffer_t),
            "::",
            stringify!(data_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_append_buffer_t>())).result as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_append_buffer_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_append_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_begin_default_pass_t {
    pub action: sg_pass_action,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_begin_default_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_begin_default_pass_t>(),
        112usize,
        concat!("Size of: ", stringify!(sg_imgui_args_begin_default_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_begin_default_pass_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sg_imgui_args_begin_default_pass_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_begin_default_pass_t>())).action as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_begin_default_pass_t),
            "::",
            stringify!(action)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_begin_default_pass_t>())).width as *const _
                as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_begin_default_pass_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_begin_default_pass_t>())).height as *const _
                as usize
        },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_begin_default_pass_t),
            "::",
            stringify!(height)
        )
    );
}
impl Default for sg_imgui_args_begin_default_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_begin_pass_t {
    pub pass: sg_pass,
    pub action: sg_pass_action,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_begin_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_begin_pass_t>(),
        108usize,
        concat!("Size of: ", stringify!(sg_imgui_args_begin_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_begin_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_begin_pass_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_begin_pass_t>())).pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_begin_pass_t),
            "::",
            stringify!(pass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_begin_pass_t>())).action as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_begin_pass_t),
            "::",
            stringify!(action)
        )
    );
}
impl Default for sg_imgui_args_begin_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_imgui_args_apply_viewport_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub origin_top_left: bool,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_apply_viewport_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_apply_viewport_t>(),
        20usize,
        concat!("Size of: ", stringify!(sg_imgui_args_apply_viewport_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_apply_viewport_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_apply_viewport_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_viewport_t>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_viewport_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_viewport_t>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_viewport_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_viewport_t>())).width as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_viewport_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_viewport_t>())).height as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_viewport_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_viewport_t>())).origin_top_left as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_viewport_t),
            "::",
            stringify!(origin_top_left)
        )
    );
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_imgui_args_apply_scissor_rect_t {
    pub x: ::std::os::raw::c_int,
    pub y: ::std::os::raw::c_int,
    pub width: ::std::os::raw::c_int,
    pub height: ::std::os::raw::c_int,
    pub origin_top_left: bool,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_apply_scissor_rect_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_apply_scissor_rect_t>(),
        20usize,
        concat!("Size of: ", stringify!(sg_imgui_args_apply_scissor_rect_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_apply_scissor_rect_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sg_imgui_args_apply_scissor_rect_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_scissor_rect_t>())).x as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_scissor_rect_t),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_scissor_rect_t>())).y as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_scissor_rect_t),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_scissor_rect_t>())).width as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_scissor_rect_t),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_scissor_rect_t>())).height as *const _
                as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_scissor_rect_t),
            "::",
            stringify!(height)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_scissor_rect_t>())).origin_top_left
                as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_scissor_rect_t),
            "::",
            stringify!(origin_top_left)
        )
    );
}
#[repr(C)]
pub struct sg_imgui_args_apply_pipeline_t {
    pub pipeline: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_apply_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_apply_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_apply_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_apply_pipeline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_apply_pipeline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_pipeline_t>())).pipeline as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_pipeline_t),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for sg_imgui_args_apply_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_apply_bindings_t {
    pub bindings: sg_bindings,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_apply_bindings_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_apply_bindings_t>(),
        176usize,
        concat!("Size of: ", stringify!(sg_imgui_args_apply_bindings_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_apply_bindings_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_apply_bindings_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_bindings_t>())).bindings as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_bindings_t),
            "::",
            stringify!(bindings)
        )
    );
}
impl Default for sg_imgui_args_apply_bindings_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_apply_uniforms_t {
    pub stage: sg_shader_stage,
    pub ub_index: ::std::os::raw::c_int,
    pub data: *const ::std::os::raw::c_void,
    pub num_bytes: ::std::os::raw::c_int,
    pub pipeline: sg_pipeline,
    pub ubuf_pos: u32,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_apply_uniforms_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_apply_uniforms_t>(),
        32usize,
        concat!("Size of: ", stringify!(sg_imgui_args_apply_uniforms_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_apply_uniforms_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_apply_uniforms_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_uniforms_t>())).stage as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_uniforms_t),
            "::",
            stringify!(stage)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_uniforms_t>())).ub_index as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_uniforms_t),
            "::",
            stringify!(ub_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_uniforms_t>())).data as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_uniforms_t),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_uniforms_t>())).num_bytes as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_uniforms_t),
            "::",
            stringify!(num_bytes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_uniforms_t>())).pipeline as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_uniforms_t),
            "::",
            stringify!(pipeline)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_apply_uniforms_t>())).ubuf_pos as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_apply_uniforms_t),
            "::",
            stringify!(ubuf_pos)
        )
    );
}
impl Default for sg_imgui_args_apply_uniforms_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_imgui_args_draw_t {
    pub base_element: ::std::os::raw::c_int,
    pub num_elements: ::std::os::raw::c_int,
    pub num_instances: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_draw_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_draw_t>(),
        12usize,
        concat!("Size of: ", stringify!(sg_imgui_args_draw_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_draw_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_draw_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_draw_t>())).base_element as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_draw_t),
            "::",
            stringify!(base_element)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_draw_t>())).num_elements as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_draw_t),
            "::",
            stringify!(num_elements)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_draw_t>())).num_instances as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_draw_t),
            "::",
            stringify!(num_instances)
        )
    );
}
#[repr(C)]
pub struct sg_imgui_args_alloc_buffer_t {
    pub result: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_alloc_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_alloc_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_alloc_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_alloc_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_alloc_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_alloc_buffer_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_alloc_buffer_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_alloc_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_alloc_image_t {
    pub result: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_alloc_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_alloc_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_alloc_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_alloc_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_alloc_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_alloc_image_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_alloc_image_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_alloc_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_alloc_shader_t {
    pub result: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_alloc_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_alloc_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_alloc_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_alloc_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_alloc_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_alloc_shader_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_alloc_shader_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_alloc_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_alloc_pipeline_t {
    pub result: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_alloc_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_alloc_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_alloc_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_alloc_pipeline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_alloc_pipeline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_alloc_pipeline_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_alloc_pipeline_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_alloc_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_alloc_pass_t {
    pub result: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_alloc_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_alloc_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_alloc_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_alloc_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_alloc_pass_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_alloc_pass_t>())).result as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_alloc_pass_t),
            "::",
            stringify!(result)
        )
    );
}
impl Default for sg_imgui_args_alloc_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_dealloc_buffer_t {
    pub buffer: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_dealloc_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_dealloc_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_dealloc_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_dealloc_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_dealloc_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_dealloc_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_dealloc_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for sg_imgui_args_dealloc_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_dealloc_image_t {
    pub image: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_dealloc_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_dealloc_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_dealloc_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_dealloc_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_dealloc_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_dealloc_image_t>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_dealloc_image_t),
            "::",
            stringify!(image)
        )
    );
}
impl Default for sg_imgui_args_dealloc_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_dealloc_shader_t {
    pub shader: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_dealloc_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_dealloc_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_dealloc_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_dealloc_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_dealloc_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_dealloc_shader_t>())).shader as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_dealloc_shader_t),
            "::",
            stringify!(shader)
        )
    );
}
impl Default for sg_imgui_args_dealloc_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_dealloc_pipeline_t {
    pub pipeline: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_dealloc_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_dealloc_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_dealloc_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_dealloc_pipeline_t>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(sg_imgui_args_dealloc_pipeline_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_dealloc_pipeline_t>())).pipeline as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_dealloc_pipeline_t),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for sg_imgui_args_dealloc_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_dealloc_pass_t {
    pub pass: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_dealloc_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_dealloc_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_dealloc_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_dealloc_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_dealloc_pass_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_dealloc_pass_t>())).pass as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_dealloc_pass_t),
            "::",
            stringify!(pass)
        )
    );
}
impl Default for sg_imgui_args_dealloc_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_init_buffer_t {
    pub buffer: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_init_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_init_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_init_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_init_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_init_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_init_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_init_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for sg_imgui_args_init_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_init_image_t {
    pub image: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_init_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_init_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_init_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_init_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_init_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_init_image_t>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_init_image_t),
            "::",
            stringify!(image)
        )
    );
}
impl Default for sg_imgui_args_init_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_init_shader_t {
    pub shader: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_init_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_init_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_init_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_init_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_init_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_init_shader_t>())).shader as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_init_shader_t),
            "::",
            stringify!(shader)
        )
    );
}
impl Default for sg_imgui_args_init_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_init_pipeline_t {
    pub pipeline: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_init_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_init_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_init_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_init_pipeline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_init_pipeline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_init_pipeline_t>())).pipeline as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_init_pipeline_t),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for sg_imgui_args_init_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_init_pass_t {
    pub pass: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_init_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_init_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_init_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_init_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_init_pass_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_init_pass_t>())).pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_init_pass_t),
            "::",
            stringify!(pass)
        )
    );
}
impl Default for sg_imgui_args_init_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_uninit_buffer_t {
    pub buffer: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_uninit_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_uninit_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_uninit_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_uninit_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_uninit_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_uninit_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_uninit_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for sg_imgui_args_uninit_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_uninit_image_t {
    pub image: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_uninit_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_uninit_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_uninit_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_uninit_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_uninit_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_uninit_image_t>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_uninit_image_t),
            "::",
            stringify!(image)
        )
    );
}
impl Default for sg_imgui_args_uninit_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_uninit_shader_t {
    pub shader: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_uninit_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_uninit_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_uninit_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_uninit_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_uninit_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_uninit_shader_t>())).shader as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_uninit_shader_t),
            "::",
            stringify!(shader)
        )
    );
}
impl Default for sg_imgui_args_uninit_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_uninit_pipeline_t {
    pub pipeline: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_uninit_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_uninit_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_uninit_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_uninit_pipeline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_uninit_pipeline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_uninit_pipeline_t>())).pipeline as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_uninit_pipeline_t),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for sg_imgui_args_uninit_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_uninit_pass_t {
    pub pass: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_uninit_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_uninit_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_uninit_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_uninit_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_uninit_pass_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_uninit_pass_t>())).pass as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_uninit_pass_t),
            "::",
            stringify!(pass)
        )
    );
}
impl Default for sg_imgui_args_uninit_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_fail_buffer_t {
    pub buffer: sg_buffer,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_fail_buffer_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_fail_buffer_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_fail_buffer_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_fail_buffer_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_fail_buffer_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_fail_buffer_t>())).buffer as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_fail_buffer_t),
            "::",
            stringify!(buffer)
        )
    );
}
impl Default for sg_imgui_args_fail_buffer_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_fail_image_t {
    pub image: sg_image,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_fail_image_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_fail_image_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_fail_image_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_fail_image_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_fail_image_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_fail_image_t>())).image as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_fail_image_t),
            "::",
            stringify!(image)
        )
    );
}
impl Default for sg_imgui_args_fail_image_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_fail_shader_t {
    pub shader: sg_shader,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_fail_shader_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_fail_shader_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_fail_shader_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_fail_shader_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_fail_shader_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_fail_shader_t>())).shader as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_fail_shader_t),
            "::",
            stringify!(shader)
        )
    );
}
impl Default for sg_imgui_args_fail_shader_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_fail_pipeline_t {
    pub pipeline: sg_pipeline,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_fail_pipeline_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_fail_pipeline_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_fail_pipeline_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_fail_pipeline_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_fail_pipeline_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_fail_pipeline_t>())).pipeline as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_fail_pipeline_t),
            "::",
            stringify!(pipeline)
        )
    );
}
impl Default for sg_imgui_args_fail_pipeline_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_fail_pass_t {
    pub pass: sg_pass,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_fail_pass_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_fail_pass_t>(),
        4usize,
        concat!("Size of: ", stringify!(sg_imgui_args_fail_pass_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_fail_pass_t>(),
        4usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_fail_pass_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_fail_pass_t>())).pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_fail_pass_t),
            "::",
            stringify!(pass)
        )
    );
}
impl Default for sg_imgui_args_fail_pass_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sg_imgui_args_push_debug_group_t {
    pub name: sg_imgui_str_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_args_push_debug_group_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_push_debug_group_t>(),
        96usize,
        concat!("Size of: ", stringify!(sg_imgui_args_push_debug_group_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_push_debug_group_t>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(sg_imgui_args_push_debug_group_t)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_push_debug_group_t>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_push_debug_group_t),
            "::",
            stringify!(name)
        )
    );
}
impl Default for sg_imgui_args_push_debug_group_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_args_t {
    pub make_buffer: __BindgenUnionField<sg_imgui_args_make_buffer_t>,
    pub make_image: __BindgenUnionField<sg_imgui_args_make_image_t>,
    pub make_shader: __BindgenUnionField<sg_imgui_args_make_shader_t>,
    pub make_pipeline: __BindgenUnionField<sg_imgui_args_make_pipeline_t>,
    pub make_pass: __BindgenUnionField<sg_imgui_args_make_pass_t>,
    pub destroy_buffer: __BindgenUnionField<sg_imgui_args_destroy_buffer_t>,
    pub destroy_image: __BindgenUnionField<sg_imgui_args_destroy_image_t>,
    pub destroy_shader: __BindgenUnionField<sg_imgui_args_destroy_shader_t>,
    pub destroy_pipeline: __BindgenUnionField<sg_imgui_args_destroy_pipeline_t>,
    pub destroy_pass: __BindgenUnionField<sg_imgui_args_destroy_pass_t>,
    pub update_buffer: __BindgenUnionField<sg_imgui_args_update_buffer_t>,
    pub update_image: __BindgenUnionField<sg_imgui_args_update_image_t>,
    pub append_buffer: __BindgenUnionField<sg_imgui_args_append_buffer_t>,
    pub begin_default_pass: __BindgenUnionField<sg_imgui_args_begin_default_pass_t>,
    pub begin_pass: __BindgenUnionField<sg_imgui_args_begin_pass_t>,
    pub apply_viewport: __BindgenUnionField<sg_imgui_args_apply_viewport_t>,
    pub apply_scissor_rect: __BindgenUnionField<sg_imgui_args_apply_scissor_rect_t>,
    pub apply_pipeline: __BindgenUnionField<sg_imgui_args_apply_pipeline_t>,
    pub apply_bindings: __BindgenUnionField<sg_imgui_args_apply_bindings_t>,
    pub apply_uniforms: __BindgenUnionField<sg_imgui_args_apply_uniforms_t>,
    pub draw: __BindgenUnionField<sg_imgui_args_draw_t>,
    pub alloc_buffer: __BindgenUnionField<sg_imgui_args_alloc_buffer_t>,
    pub alloc_image: __BindgenUnionField<sg_imgui_args_alloc_image_t>,
    pub alloc_shader: __BindgenUnionField<sg_imgui_args_alloc_shader_t>,
    pub alloc_pipeline: __BindgenUnionField<sg_imgui_args_alloc_pipeline_t>,
    pub alloc_pass: __BindgenUnionField<sg_imgui_args_alloc_pass_t>,
    pub dealloc_buffer: __BindgenUnionField<sg_imgui_args_dealloc_buffer_t>,
    pub dealloc_image: __BindgenUnionField<sg_imgui_args_dealloc_image_t>,
    pub dealloc_shader: __BindgenUnionField<sg_imgui_args_dealloc_shader_t>,
    pub dealloc_pipeline: __BindgenUnionField<sg_imgui_args_dealloc_pipeline_t>,
    pub dealloc_pass: __BindgenUnionField<sg_imgui_args_dealloc_pass_t>,
    pub init_buffer: __BindgenUnionField<sg_imgui_args_init_buffer_t>,
    pub init_image: __BindgenUnionField<sg_imgui_args_init_image_t>,
    pub init_shader: __BindgenUnionField<sg_imgui_args_init_shader_t>,
    pub init_pipeline: __BindgenUnionField<sg_imgui_args_init_pipeline_t>,
    pub init_pass: __BindgenUnionField<sg_imgui_args_init_pass_t>,
    pub uninit_buffer: __BindgenUnionField<sg_imgui_args_uninit_buffer_t>,
    pub uninit_image: __BindgenUnionField<sg_imgui_args_uninit_image_t>,
    pub uninit_shader: __BindgenUnionField<sg_imgui_args_uninit_shader_t>,
    pub uninit_pipeline: __BindgenUnionField<sg_imgui_args_uninit_pipeline_t>,
    pub uninit_pass: __BindgenUnionField<sg_imgui_args_uninit_pass_t>,
    pub fail_buffer: __BindgenUnionField<sg_imgui_args_fail_buffer_t>,
    pub fail_image: __BindgenUnionField<sg_imgui_args_fail_image_t>,
    pub fail_shader: __BindgenUnionField<sg_imgui_args_fail_shader_t>,
    pub fail_pipeline: __BindgenUnionField<sg_imgui_args_fail_pipeline_t>,
    pub fail_pass: __BindgenUnionField<sg_imgui_args_fail_pass_t>,
    pub push_debug_group: __BindgenUnionField<sg_imgui_args_push_debug_group_t>,
    pub bindgen_union_field: [u64; 22usize],
}
#[test]
fn bindgen_test_layout_sg_imgui_args_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_args_t>(),
        176usize,
        concat!("Size of: ", stringify!(sg_imgui_args_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_args_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_args_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).make_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(make_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).make_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(make_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).make_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(make_shader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).make_pipeline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(make_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).make_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(make_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).destroy_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(destroy_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).destroy_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(destroy_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).destroy_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(destroy_shader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_t>())).destroy_pipeline as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(destroy_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).destroy_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(destroy_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).update_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(update_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).update_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(update_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).append_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(append_buffer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_t>())).begin_default_pass as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(begin_default_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).begin_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(begin_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).apply_viewport as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(apply_viewport)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_t>())).apply_scissor_rect as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(apply_scissor_rect)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).apply_pipeline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(apply_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).apply_bindings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(apply_bindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).apply_uniforms as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(apply_uniforms)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).draw as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(draw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).alloc_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(alloc_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).alloc_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(alloc_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).alloc_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(alloc_shader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).alloc_pipeline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(alloc_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).alloc_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(alloc_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).dealloc_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(dealloc_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).dealloc_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(dealloc_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).dealloc_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(dealloc_shader)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_t>())).dealloc_pipeline as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(dealloc_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).dealloc_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(dealloc_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).init_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(init_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).init_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(init_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).init_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(init_shader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).init_pipeline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(init_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).init_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(init_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).uninit_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(uninit_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).uninit_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(uninit_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).uninit_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(uninit_shader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).uninit_pipeline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(uninit_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).uninit_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(uninit_pass)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).fail_buffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(fail_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).fail_image as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(fail_image)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).fail_shader as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(fail_shader)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).fail_pipeline as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(fail_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_args_t>())).fail_pass as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(fail_pass)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_args_t>())).push_debug_group as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_args_t),
            "::",
            stringify!(push_debug_group)
        )
    );
}
impl Default for sg_imgui_args_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_capture_item_t {
    pub cmd: sg_imgui_cmd_t,
    pub color: u32,
    pub args: sg_imgui_args_t,
}
#[test]
fn bindgen_test_layout_sg_imgui_capture_item_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_capture_item_t>(),
        184usize,
        concat!("Size of: ", stringify!(sg_imgui_capture_item_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_capture_item_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_capture_item_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_item_t>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_item_t),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_item_t>())).color as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_item_t),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_item_t>())).args as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_item_t),
            "::",
            stringify!(args)
        )
    );
}
impl Default for sg_imgui_capture_item_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_capture_bucket_t {
    pub ubuf_size: u32,
    pub ubuf_pos: u32,
    pub ubuf: *mut u8,
    pub num_items: u32,
    pub items: [sg_imgui_capture_item_t; 4096usize],
}
#[test]
fn bindgen_test_layout_sg_imgui_capture_bucket_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_capture_bucket_t>(),
        753688usize,
        concat!("Size of: ", stringify!(sg_imgui_capture_bucket_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_capture_bucket_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_capture_bucket_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_capture_bucket_t>())).ubuf_size as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_bucket_t),
            "::",
            stringify!(ubuf_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_capture_bucket_t>())).ubuf_pos as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_bucket_t),
            "::",
            stringify!(ubuf_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_bucket_t>())).ubuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_bucket_t),
            "::",
            stringify!(ubuf)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sg_imgui_capture_bucket_t>())).num_items as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_bucket_t),
            "::",
            stringify!(num_items)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_bucket_t>())).items as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_bucket_t),
            "::",
            stringify!(items)
        )
    );
}
impl Default for sg_imgui_capture_bucket_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
pub struct sg_imgui_capture_t {
    pub open: bool,
    pub bucket_index: u32,
    pub sel_item: u32,
    pub bucket: [sg_imgui_capture_bucket_t; 2usize],
}
#[test]
fn bindgen_test_layout_sg_imgui_capture_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_capture_t>(),
        1507392usize,
        concat!("Size of: ", stringify!(sg_imgui_capture_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_capture_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_capture_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_t),
            "::",
            stringify!(open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_t>())).bucket_index as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_t),
            "::",
            stringify!(bucket_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_t>())).sel_item as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_t),
            "::",
            stringify!(sel_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_capture_t>())).bucket as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_capture_t),
            "::",
            stringify!(bucket)
        )
    );
}
impl Default for sg_imgui_capture_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
#[repr(C)]
#[derive(Debug, Default, Copy, Clone)]
pub struct sg_imgui_caps_t {
    pub open: bool,
}
#[test]
fn bindgen_test_layout_sg_imgui_caps_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_caps_t>(),
        1usize,
        concat!("Size of: ", stringify!(sg_imgui_caps_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_caps_t>(),
        1usize,
        concat!("Alignment of ", stringify!(sg_imgui_caps_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_caps_t>())).open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_caps_t),
            "::",
            stringify!(open)
        )
    );
}
#[repr(C)]
pub struct sg_imgui_t {
    pub init_tag: u32,
    pub buffers: sg_imgui_buffers_t,
    pub images: sg_imgui_images_t,
    pub shaders: sg_imgui_shaders_t,
    pub pipelines: sg_imgui_pipelines_t,
    pub passes: sg_imgui_passes_t,
    pub capture: sg_imgui_capture_t,
    pub caps: sg_imgui_caps_t,
    pub cur_pipeline: sg_pipeline,
    pub hooks: sg_trace_hooks,
}
#[test]
fn bindgen_test_layout_sg_imgui_t() {
    assert_eq!(
        ::std::mem::size_of::<sg_imgui_t>(),
        1508016usize,
        concat!("Size of: ", stringify!(sg_imgui_t))
    );
    assert_eq!(
        ::std::mem::align_of::<sg_imgui_t>(),
        8usize,
        concat!("Alignment of ", stringify!(sg_imgui_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).init_tag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(init_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).buffers as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(buffers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).images as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(images)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).shaders as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(shaders)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).pipelines as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(pipelines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).passes as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(passes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).capture as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(capture)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).caps as *const _ as usize },
        1507520usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(caps)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).cur_pipeline as *const _ as usize },
        1507524usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(cur_pipeline)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sg_imgui_t>())).hooks as *const _ as usize },
        1507528usize,
        concat!(
            "Offset of field: ",
            stringify!(sg_imgui_t),
            "::",
            stringify!(hooks)
        )
    );
}
impl Default for sg_imgui_t {
    fn default() -> Self {
        unsafe { ::std::mem::zeroed() }
    }
}
